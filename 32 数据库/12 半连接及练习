
定义: 在子查询中有访问父查询中表的信息的， 就叫半连接


案例1:
        1. 创建表
            CREATE TABLE students(id int primary key, name char(12), class_id int)  default charset=utf8mb4;
            CREATE TABLE class(id int primary key, name char(12), manager char(12)) default charset=utf8mb4;

        2. 插入数据
            INSERT INTO students(id, name, class_id) values(1, 'A', 1), (2, 'B', 2), (3, 'C', 3),(4, 'D',1),(5,'E',2),(6,'F',3);
            INSERT INTO class(id, name, manager) values(1,'普通班','zhenping'),(2,'大神班', 'weizi'),(3,'超越班', 'fukun');


        3. 数据表展示:
            mysql> select * from students;
            +----+------+----------+
            | id | name | class_id |
            +----+------+----------+
            |  1 | A    |        1 |
            |  2 | B    |        2 |
            |  3 | C    |        3 |
            |  4 | D    |        1 |
            |  5 | E    |        2 |
            |  6 | F    |        3 |
            +----+------+----------+
            6 rows in set (0.00 sec)

            mysql> select * from class;
            +----+-----------+----------+
            | id | name      | manager  |
            +----+-----------+----------+
            |  1 | 普通班    | zhenping |
            |  2 | 大神班    | weizi    |
            |  3 | 超越班    | fukun    |
            +----+-----------+----------+
            3 rows in set (0.00 sec)


需求:
    找到每个班级中，最大学生id，并显示学生信息

    #使用分组方式查询结果
    mysql> select max(id) as id , name , class_id  from students group by class_id;
    +------+------+----------+
    | id   | name | class_id |
    +------+------+----------+
    |    4 | A    |        1 |
    |    5 | B    |        2 |
    |    6 | C    |        3 |
    +------+------+----------+
    3 rows in set (0.00 sec)

    #使用半连接查询结果
    mysql> select * from students as s1 where id = (select max(id)  from students where class_id = s1.class_id) ;
    +----+------+----------+
    | id | name | class_id |
    +----+------+----------+
    |  4 | D    |        1 |
    |  5 | E    |        2 |
    |  6 | F    |        3 |
    +----+------+----------+
    3 rows in set (0.00 sec)


练习1:
    SQL架构:

	    Create table If Not Exists Employee (Id int, Name varchar(255), Salary int, DepartmentId int);
	    Create table If Not Exists Department (Id int, Name varchar(255));
	    Truncate table Employee;
	    insert into Employee (Id, Name, Salary, DepartmentId) values ('1', 'Joe', '70000', '1');
	    insert into Employee (Id, Name, Salary, DepartmentId) values ('2', 'Jim', '90000', '1');
	    insert into Employee (Id, Name, Salary, DepartmentId) values ('3', 'Henry', '80000', '2');
	    insert into Employee (Id, Name, Salary, DepartmentId) values ('4', 'Sam', '60000', '2');
	    insert into Employee (Id, Name, Salary, DepartmentId) values ('5', 'Max', '90000', '1');
	    Truncate table Department;
	    insert into Department (Id, Name) values ('1', 'IT');
	    insert into Department (Id, Name) values ('2', 'Sales');
	表信息:
	    mysql> select * from Employee;
        +------+-------+--------+--------------+
        | Id   | Name  | Salary | DepartmentId |
        +------+-------+--------+--------------+
        |    1 | Joe   |  70000 |            1 |
        |    2 | Jim   |  90000 |            1 |
        |    3 | Henry |  80000 |            2 |
        |    4 | Sam   |  60000 |            2 |
        |    5 | Max   |  90000 |            1 |
        +------+-------+--------+--------------+
        5 rows in set (0.00 sec)

        mysql> select * from Department;
        +------+-------+
        | Id   | Name  |
        +------+-------+
        |    1 | IT    |
        |    2 | Sales |
        +------+-------+
        2 rows in set (0.00 sec)

    需求:  部门工资最高的员工
        mysql> select d1.Name, e1.Name, e1.Salary from Employee as e1 join Department as d1 on d1.Id = e1.DepartmentId where Salary=(
            select max(Salary) from Employee where DepartmentId=e1.DepartmentId
            );
        +-------+-------+--------+
        | Name  | Name  | Salary |
        +-------+-------+--------+
        | IT    | Jim   |  90000 |
        | Sales | Henry |  80000 |
        | IT    | Max   |  90000 |
        +-------+-------+--------+
        3 rows in set (0.01 sec)


练习二:
    根据表字段，创建表
        CREATE TABLE Student(SId int primary key, Sname varchar(255) , Sage int ,Ssex varchar(255) ) default charset=utf8mb4;
        CREATE TABLE Course(CId int primary key, Cname varchar(255) , TId int) default charset=utf8mb4;
        CREATE TABLE Teacher(TId int primary key, Tname varchar(255)) default charset=utf8mb4;
        CREATE TABLE SC(SId int, CId int, score int) default charset=utf8mb4;

        INSERT INTO Student(SId, Sname, Sage,Ssex) values (1, 'A', 18, '男'), (2, 'B', 19, '女'),(3, 'C', 20, '男'),(4, 'D', 19, '女'),(5, 'E', 18, '男'),(6, 'F', 17, '女'),(7, 'G', 22, '男'),(8, 'H', 16, '女');
        INSERT INTO Course(CId, Cname, TId) values (1, '语文', 1),(2, '数学', 2);
        INSERT INTO Teacher(TId, Tname) values (1, 'zhenping'), (2, 'weizi');
        INSERT INTO SC(SId, CId, score) values (1, 1, 89),(1, 2, 90),(2, 1, 91),(2, 2, 89),(3, 1, 78),(3, 2, 63),(4, 1, 82),(4, 2, 80),(5, 1, 87),(5, 2, 85),(6, 1, 83),(6, 2, 91),(7, 1, 67),(7, 2, 90),(8, 1, 99),(8, 2, 85);


    表信息:
        mysql> select * from Course;
        +-----+--------+------+
        | CId | Cname  | TId  |
        +-----+--------+------+
        |   1 | 语文   |    1 |
        |   2 | 数学   |    2 |
        +-----+--------+------+
        2 rows in set (0.00 sec)

        mysql> select * from Student;
        +-----+-------+------+------+
        | SId | Sname | Sage | Ssex |
        +-----+-------+------+------+
        |   1 | A     |   18 | 男   |
        |   2 | B     |   19 | 女   |
        |   3 | C     |   20 | 男   |
        |   4 | D     |   19 | 女   |
        |   5 | E     |   18 | 男   |
        |   6 | F     |   17 | 女   |
        |   7 | G     |   22 | 男   |
        |   8 | H     |   16 | 女   |
        +-----+-------+------+------+
        8 rows in set (0.00 sec)

        mysql> select * from Sc;
        +------+------+-------+
        | SId  | CId  | score |
        +------+------+-------+
        |    1 |    1 |    89 |
        |    1 |    2 |    90 |
        |    2 |    1 |    91 |
        |    2 |    2 |    89 |
        |    3 |    1 |    78 |
        |    3 |    2 |    63 |
        |    4 |    1 |    82 |
        |    4 |    2 |    80 |
        |    5 |    1 |    87 |
        |    5 |    2 |    85 |
        |    6 |    1 |    83 |
        |    6 |    2 |    91 |
        |    7 |    1 |    67 |
        |    7 |    2 |    90 |
        |    8 |    1 |    99 |
        |    8 |    2 |    85 |
        +------+------+-------+
        16 rows in set (0.00 sec)

        mysql> select * from Teacher;
        +-----+----------+
        | TId | Tname    |
        +-----+----------+
        |   1 | zhenping |
        |   2 | weizi    |
        +-----+----------+
        2 rows in set (0.00 sec)


    需求:  查询同时选择了01课程和02课程的学生信息

        分析:
            - 如果需要知道即选择了01课程 ，又选择了02课程的学生，那么这之间是一起满足的意思。就必须让这两个条件在同一行。
            - 不同行之间共同满足一个条件，则需要将不同行放到同一行上才可以。

    子查询实现:
        select * from student  where Sid in (select s1.SId from sc as s1 join sc as s2 on s1.SId = s2.SId and s1.CId ='1' and s2.CId = '2') group by SId;

    Join实现:
        select st.Sname  from sc as s1 join sc as s2 on s1.SId = s2.SId and s1.CId = 1 and s2.CId = 2 join student as st on st.SId = s1.SId where st.SId > 3;


    需求: 查询在SC表存在成绩的学生信息
        select distinct students.* from sc join students on students.id = sc.SId;
    需求: 查询在SC表不存在成绩的学生信息
        select * from students where id not in (select distinct students.id from sc join students on students.id = sc.SId);
        select students.id, students.name  from students left join sc on students.id = sc.SId where sc.SId is NULL;

    需求: 查询所有同学(每一个学生)的学生编号， 学生姓名，选课总数（count), 所有课程的总成绩（sum)， 没有成绩的显示为Null
        select st.Id, st.name, count(sc.CId) as '课程总数', sum(sc.score) as '课程总分'  from sc right join students as st on sc.SId = st.id group by st.Id order by st.Id;

    需求: 查询李姓老师的数量
         select count(1) from Teacher where Tname like '李%';

    需求: 查询学过[zhenping]老师课程的同学信息
        // 使用on过滤'zhenping'老师
        select st.id, st.name from Teacher as T join Course as C on T.TId = C.TId and T.Tname="zhenping" join sc as S on S.CId = C.CId join Students as st on st.id = S.SId;
        // 使用where条件过滤'zhenping'老师
        select st.id, st.name from Teacher as T join Course as C on T.TId = C.TId join sc as S on S.CId = C.CId join Students as st on st.id = S.SId where T.Tname="zhenping";
    需求: 查询没有学全所有课程的同学的信息

        // NOT IN : 先找出所有学完全部课程的学生ID,将学生表中这些ID去掉，就能获取到没有学全的学生信息。学全的意思是: 学习的课程数量，等于总课程数量。

        mysql> select * from student where SId not in (select sid from sc group by Sid having count(1) = 2);
        +-----+-------+------+------+
        | SId | Sname | Sage | Ssex |
        +-----+-------+------+------+
        |   6 | F     |   17 | 女   |
        +-----+-------+------+------+

        // left join
        mysql> select * from student left join sc on student.SId = sc.SId group by student.Sid having count(1) < (select count(1) from course);
        +-----+-------+------+------+------+------+-------+
        | SId | Sname | Sage | Ssex | SId  | CId  | score |
        +-----+-------+------+------+------+------+-------+
        |   6 | F     |   17 | 女   |    6 |    1 |    83 |
        +-----+-------+------+------+------+------+-------+

    需求: 查询至少有一门课与学员为"01"的同学所学相同的同学信息
        分析；
            -- 1. 找到所有的01学生学习过的科目信息
            -- 2. 找出学习过这几门科目的学生的信息，去重就可以

        SQL: 子查询实现
            select * from student where SId in (
                select SId from sc where cid in (
                    select cid from sc where SId = '1'
                    )
                );
        SQL: Join实现
           select distinct student.* from sc as s1 join sc as s2 on s1.SId='1' and s1.CId = s2.CId join student on s2.SId = student.SId;
           select  student.* from sc as s1 join sc as s2 on s1.SId='1' and s1.CId = s2.CId join student on s2.SId = student.SId group by student.SId;

    需求: 查询和01号的同学学习的课程 ，完全相同的其他同学的信息
        分析:
            -- 1. 取出第一个表，这个表中包含的是所有01学生的课程情况
            -- 2. 取出第二个表
            -- 3. 将这两个表进行Join， 要求他们课程相等, 但第二个表不包含学员01
            -- 4. 判断right join后的其他学生的课程数量，如果数量与01相等，好那么就说明与01课程数量一致。判断没有NULL的列

        SQL:
            select
                student.*
            from
                sc as s1 right join sc as s2 on s1.SId='1' and s1.CId = s2.CId  join student on student.SId = s2.SId
            where
                s2.SId != 1
            group by
                s2.SId
            having
                count(s2.SId) = (select count(1) from sc where SId = '01') -- 判断课程数量是否相等
                and
                count(s2.SID) = count(s1.SId); -- 判断课程是否相等


    需求: 查询两门及其以上不及格课程的同学的学号，姓名及平均成绩。

        分析:
            -- 1. 因为每一个学生都有一个姓名和平均成绩，使用group by
            -- 2. 找到两门课，代表着需要用COUNT
            -- 3. 不及格: 小于85， 可以使用case when 配合count计算不及格的数量。

        SQL:
            select
                st.* FROM sc as s1 join student as st on st.SId = s1.SId
            group by s1.SId
            HAVING
                count(
                       case when s1.score < 85 then 1 else NULL end
                ) >= 2 ;