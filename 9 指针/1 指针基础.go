package main

import "fmt"

func main() {

	/*
	1. 指针的理论
	指针也是一个变量， 但它是一种特殊的变量，因为它存储的数据不仅仅是一个普通的值 ，如简单的整数或字符串， 而是另一个变量的内存地址。
	即另外一个变量的内存地址。

	2. 指针的定义语法
		var 指针变量名 *类型

	*p : 解引用， 间接引用
	默认值: nil
	操作符&取变量地址，*通过指针访问目录对象

	指针使用注意:
		空指针: 未被初始化的指针

	栈桢:  用来给函数运行提供内存空间，取内存于stack上。
		当函数调用时，产生栈桢， 函数调用结束，释放栈桢
		栈桢存储:
			1. 局部变量
			2. 形参 (形参位局部变量存储地位相同)
			3. 内存字段描述值

	指针的函数传参（传引用）：
		传地址(引用): 将形参的地址值作为函数参数传递
		传值（数据值）: 将实参的值拷贝一份给形参
		传引用:  在A栈桢内部，修改B栈桢中的变量值


	*/


	var a int = 10
		var p * int // 此处的类型，取决于要指向变量的本身类型。
		p = &a
		fmt.Println(p) // 执行结果: 0xc00009c008, p的值为a的内存地址
		fmt.Println(*p) // 执行结果: 10 , 使用*p的方式 ，可以获取a变量所对应的值。
		*p = 222
		fmt.Println(a) // 执行结果: 222, 可以通过*p的方式，直接修改变量a的值。

}
