package main

/*
	并行(parallel) : 指同一时刻，有多条指令在多个处理器上同时执行
	并发:
		宏观并发: 用户体验上，程序在并行执行。
		微观并发: 多个计划任务顺序执行，在快速的切换。轮换使用cpu时间片。

	进程并发:
		进程: 运行起来的程序， 进程需要占用系统资源(内存, cpu)
		程序: 编译成功得到的二进制文件。只占用磁盘存储，不消耗其他系统资源

	进程的基本状态:
		初始态
		就绪态: 等待cpu分配时间片
		运行态: 占用cpu
		挂起态: 等待其他资源就绪, 也被称为阻塞态
		终止态:

	线程并发：
		LWP: light weight process 轻量级的进程, 本质还是进程，最小的执行单位
		进程: 独立地址空间，拥有PCB, 最小的系统资源分配单位。
		线程: 有独立的PCB, 但没有独立的地址空间（共享进程的)

	同步:
		协同步调，规划先后顺序. 避免时间关系导致的混乱。解决思路：加锁。

	同步的实现方式:
		互斥锁, 也称为互斥量mutex。没有拿到锁的线程会被阻塞。
		读写锁: 一把锁有读和写两个属性。 写独占， 读共享， 写锁优先级高。

	协程并发:
		协程: coroutine , 也叫轻量级线程. 它是为了提高程序执行的效率。


	进程的稳定性较高。 进程相比线程开销要大些。线程节省资源。 协程效率高。

 */
